package org.example.lab6javafx.domain;

import java.util.List;
import java.util.Objects;
import java.util.Vector;

public class Utilizator extends Entity<Long>{
    private String firstName;
    private String lastName;
    private String username;
    private String password;
    private List<Utilizator> friends;

    /**
     * creater for user
     * @param firstName user's first name
     * @param lastName user's second name
     */
    public Utilizator(String firstName, String lastName, String username, String password) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.username = username;
        this.password = password;
        friends = new Vector<Utilizator>();
    }

    /**
     * @return user's first name
     */
    public String getFirstName() {
        return firstName;
    }

    /**
     * sets user's first name
     * @param firstName
     */
    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    /**
     * @return user's last name
     */
    public String getLastName() {
        return lastName;
    }

    /**
     * sets user's last name
     * @param lastName
     */
    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }
    /**
     * gets list of friends
     * @return list of friends
     */
    public List<Utilizator> getFriends() {
        return friends;
    }

    /**
     * adds a friend
     * @param friend the friend to be added
     */
    public void addFriend(Utilizator friend) {
        friends.add(friend);
    }

    /**
     * removes a friend
     * @param friend the friend to be removed
     */
    public void removeFriend(Utilizator friend) {
        friends.remove(friend);
    }

    /**
     * to string for user
     */
    @Override
    public String toString() {
        return "Utilizator{" +
                "firstName='" + firstName + '\'' +
                ", lastName='" + lastName + '\'' +
                ", friends=" + friends +
                "}";
    }

    /**
     * equality of users
     * @param o See if object is equal with o
     * @return true if the users are equal, else false
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Utilizator)) return false;
        Utilizator that = (Utilizator) o;
        return getFirstName().equals(that.getFirstName()) &&
                getLastName().equals(that.getLastName()) &&
                getFriends().equals(that.getFriends());
    }

    /**
     * @return hashcode generated by user
     */
    @Override
    public int hashCode() {
        return Objects.hash(getFirstName(), getLastName(), getFriends());
    }

}

